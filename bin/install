#! /usr/bin/env bash

# shellcheck source-path=..
source "${MISE_PLUGIN_PATH-${0%/*}/..}/utils.sh"

DOWNLOAD_PATH="https://github.com/getsops/sops/releases/download"

ERRORS=0

if [[ -z ${MISE_INSTALL_TYPE-} ]]; then
  echoerr "MISE_INSTALL_TYPE is required"
  ERRORS=$((ERRORS + 1))
fi
if [[ -z ${MISE_INSTALL_VERSION-} ]]; then
  echoerr "MISE_INSTALL_VERSION is required"
  ERRORS=$((ERRORS + 1))
fi
if [[ -z ${MISE_INSTALL_PATH-} ]]; then
  echoerr "MISE_INSTALL_PATH is required"
  ERRORS=$((ERRORS + 1))
fi

if ((ERRORS)); then
  exit 1
fi

install_sops() {
  local install_type=$1
  if [[ "${install_type}" != "version" ]]; then
    echoerr "install type, ${install_type}, is not supported"
    return 1
  fi

  local version=$2

  # add the 'v' tag prefix for versions >= 3.5.0
  if min_version "${version}" 3.5.0; then
    version="v${version}"
  fi

  local install_path=$3

  local bin_install_path="${install_path}/bin"
  local bin_path="${bin_install_path}/sops"

  local download_url
  download_url=$(get_download_url "${version}")

  mkdir -p "${bin_install_path}"

  echo "Downloading sops from ${download_url}"
  if ! curl -qSsfL "${download_url}" -o "${bin_path}"; then
    echoerr "Error: URL responded exceptionally"
    return 1
  fi
  chmod +x "${bin_path}"
}

get_arch() {
  uname | tr '[:upper:]' '[:lower:]'
}

get_cpu() {
  local machine_hardware_name
  machine_hardware_name=${MISE_SOPS_OVERWRITE_ARCH:-"$(uname -m)"}

  case "${machine_hardware_name}" in
    'x86_64') local cpu_type="amd64" ;;
    'aarch64') local cpu_type="arm64" ;;
    *) local cpu_type="${machine_hardware_name}" ;;
  esac

  echo "${cpu_type}"
}

get_download_url() {
  local version="$1"
  local url

  url="${DOWNLOAD_PATH}/${version}/sops-${version}.$(get_arch)"

  if min_version "${version}" v3.7.2; then
    url="${url}.$(get_cpu)"
  fi

  echo "${url}"
}

install_sops "${MISE_INSTALL_TYPE}" "${MISE_INSTALL_VERSION}" "${MISE_INSTALL_PATH}"
